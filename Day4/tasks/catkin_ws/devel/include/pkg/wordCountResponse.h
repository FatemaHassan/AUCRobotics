// Generated by gencpp from file pkg/wordCountResponse.msg
// DO NOT EDIT!


#ifndef PKG_MESSAGE_WORDCOUNTRESPONSE_H
#define PKG_MESSAGE_WORDCOUNTRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pkg
{
template <class ContainerAllocator>
struct wordCountResponse_
{
  typedef wordCountResponse_<ContainerAllocator> Type;

  wordCountResponse_()
    : count(0)  {
    }
  wordCountResponse_(const ContainerAllocator& _alloc)
    : count(0)  {
  (void)_alloc;
    }



   typedef uint32_t _count_type;
  _count_type count;





  typedef boost::shared_ptr< ::pkg::wordCountResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pkg::wordCountResponse_<ContainerAllocator> const> ConstPtr;

}; // struct wordCountResponse_

typedef ::pkg::wordCountResponse_<std::allocator<void> > wordCountResponse;

typedef boost::shared_ptr< ::pkg::wordCountResponse > wordCountResponsePtr;
typedef boost::shared_ptr< ::pkg::wordCountResponse const> wordCountResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pkg::wordCountResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pkg::wordCountResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pkg::wordCountResponse_<ContainerAllocator1> & lhs, const ::pkg::wordCountResponse_<ContainerAllocator2> & rhs)
{
  return lhs.count == rhs.count;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pkg::wordCountResponse_<ContainerAllocator1> & lhs, const ::pkg::wordCountResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pkg::wordCountResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pkg::wordCountResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pkg::wordCountResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pkg::wordCountResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pkg::wordCountResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pkg::wordCountResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pkg::wordCountResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac8b22eb02c1f433e0a55ee9aac59a18";
  }

  static const char* value(const ::pkg::wordCountResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac8b22eb02c1f433ULL;
  static const uint64_t static_value2 = 0xe0a55ee9aac59a18ULL;
};

template<class ContainerAllocator>
struct DataType< ::pkg::wordCountResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pkg/wordCountResponse";
  }

  static const char* value(const ::pkg::wordCountResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pkg::wordCountResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 count\n"
"\n"
;
  }

  static const char* value(const ::pkg::wordCountResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pkg::wordCountResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.count);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct wordCountResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pkg::wordCountResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pkg::wordCountResponse_<ContainerAllocator>& v)
  {
    s << indent << "count: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.count);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PKG_MESSAGE_WORDCOUNTRESPONSE_H
